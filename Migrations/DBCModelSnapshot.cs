// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PototoTrade.Data;

#nullable disable

namespace PototoTrade.Migrations
{
    [DbContext(typeof(DBC))]
    partial class DBCModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_unicode_ci")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("PototoTrade.Models.BuyerItem.BuyerItemDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyerItemId")
                        .HasColumnType("int")
                        .HasColumnName("buyer_item_id");

                    b.Property<DateTime>("StageDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("stage_date");

                    b.Property<string>("StageDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("stage_description");

                    b.Property<string>("StageTypes")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("stage_types");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BuyerItemId" }, "buyer_item_id");

                    b.ToTable("buyer_item_delivery", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.BuyerItem.BuyerItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("ArrivedDate")
                        .HasColumnType("date")
                        .HasColumnName("arrived_date");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int")
                        .HasColumnName("buyer_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<DateOnly?>("ValidRefundDate")
                        .HasColumnType("date")
                        .HasColumnName("valid_refund_date");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BuyerId" }, "buyer_id");

                    b.HasIndex(new[] { "OrderId" }, "order_id");

                    b.HasIndex(new[] { "ProductId" }, "product_id");

                    b.ToTable("buyer_item", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.Content.ContentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("content_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("MediaBoolean")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("media_boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ContentId" }, "content_id");

                    b.ToTable("content_details", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.Content.Contents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("UniqueCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("unique_code");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UniqueCode" }, "unique_code")
                        .IsUnique();

                    b.ToTable("content", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.Media.Medium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("media_url");

                    b.Property<int>("SourceId")
                        .HasColumnType("int")
                        .HasColumnName("source_id");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("source_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("media", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.Notification.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_id");

                    b.ToTable("notification", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.Product.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("ChargeRate")
                        .HasColumnType("double")
                        .HasColumnName("charge_rate");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ProductCategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("product_category_name");

                    b.Property<double>("RebateRate")
                        .HasColumnType("double")
                        .HasColumnName("rebate_rate");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductCategoryName" }, "product_category_name")
                        .IsUnique();

                    b.ToTable("product_category", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.Product.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("MediaBoolean")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("media_boolean");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<string>("ReviewComment")
                        .HasColumnType("text")
                        .HasColumnName("review_comment");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("review_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "product_id")
                        .HasDatabaseName("product_id1");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id1");

                    b.ToTable("product_review", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.Product.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("MediaBoolean")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("media_boolean");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<int>("RefundGuaranteedDuration")
                        .HasColumnType("int")
                        .HasColumnName("refund_guaranteed_duration");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId" }, "category_id");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id2");

                    b.ToTable("products", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.Product.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    b.Property<DateTime>("OrderCreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("order_created_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_amount");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CartId" }, "cart_id");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id3");

                    b.ToTable("purchase_order", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.Role.Role.AdminPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanCreate")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_create");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_delete");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_edit");

                    b.Property<bool>("CanView")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_view");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "role_id");

                    b.ToTable("admin_permissions", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.Role.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_name");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_type");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleName" }, "role_name")
                        .IsUnique();

                    b.ToTable("roles", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.ShoppingCart.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("added_at");

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CartId" }, "cart_id")
                        .HasDatabaseName("cart_id1");

                    b.HasIndex(new[] { "ProductId" }, "product_id")
                        .HasDatabaseName("product_id2");

                    b.ToTable("shopping_cart_items", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.ShoppingCart.ShoppingCarts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .IsUnique()
                        .HasDatabaseName("user_id4");

                    b.ToTable("shopping_cart", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.User.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "role_id")
                        .HasDatabaseName("role_id1");

                    b.HasIndex(new[] { "Username" }, "username")
                        .IsUnique();

                    b.ToTable("user_accounts", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.User.UserActivitiesLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("activity_date");

                    b.Property<string>("ActivityInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("activity_info");

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("activity_name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id5");

                    b.ToTable("user_activities_log", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.User.UserDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("text")
                        .HasColumnName("billing_address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("gender");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "email")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id6");

                    b.ToTable("user_details", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.User.UserReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ReportComment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("report_comment");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("report_date");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("report_type");

                    b.Property<int>("ReportedUserId")
                        .HasColumnType("int")
                        .HasColumnName("reported_user_id");

                    b.Property<int>("ReporterUserId")
                        .HasColumnType("int")
                        .HasColumnName("reporter_user_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ReportedUserId" }, "reported_user_id");

                    b.HasIndex(new[] { "ReporterUserId" }, "reporter_user_id");

                    b.ToTable("user_report", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.User.UserSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("access_token");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_revoked");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("revoked_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id7");

                    b.ToTable("user_session", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.User.UserWallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AvailableBalance")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("available_balance");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("currency");

                    b.Property<decimal>("OnHoldBalance")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("on_hold_balance");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .IsUnique()
                        .HasDatabaseName("user_id8");

                    b.ToTable("user_wallet", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.User.WalletTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("transaction_type");

                    b.Property<int>("WalletId")
                        .HasColumnType("int")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "WalletId" }, "wallet_id");

                    b.ToTable("wallet_transaction", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("PototoTrade.Models.BuyerItem.BuyerItemDelivery", b =>
                {
                    b.HasOne("PototoTrade.Models.BuyerItem.BuyerItems", "BuyerItem")
                        .WithMany("BuyerItemDeliveries")
                        .HasForeignKey("BuyerItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("buyer_item_delivery_ibfk_1");

                    b.Navigation("BuyerItem");
                });

            modelBuilder.Entity("PototoTrade.Models.BuyerItem.BuyerItems", b =>
                {
                    b.HasOne("PototoTrade.Models.User.UserAccount", "Buyer")
                        .WithMany("BuyerItems")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("buyer_item_ibfk_3");

                    b.HasOne("PototoTrade.Models.Product.PurchaseOrder", "Order")
                        .WithMany("BuyerItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("buyer_item_ibfk_1");

                    b.HasOne("PototoTrade.Models.Product.Products", "Product")
                        .WithMany("BuyerItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("buyer_item_ibfk_2");

                    b.Navigation("Buyer");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PototoTrade.Models.Content.ContentDetail", b =>
                {
                    b.HasOne("PototoTrade.Models.Content.Contents", "Content")
                        .WithMany("ContentDetails")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("content_details_ibfk_1");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("PototoTrade.Models.Notification.Notifications", b =>
                {
                    b.HasOne("PototoTrade.Models.User.UserAccount", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("notification_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PototoTrade.Models.Product.ProductReview", b =>
                {
                    b.HasOne("PototoTrade.Models.Product.Products", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_review_ibfk_1");

                    b.HasOne("PototoTrade.Models.User.UserAccount", "User")
                        .WithMany("ProductReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_review_ibfk_2");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PototoTrade.Models.Product.Products", b =>
                {
                    b.HasOne("PototoTrade.Models.Product.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("products_ibfk_2");

                    b.HasOne("PototoTrade.Models.User.UserAccount", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("products_ibfk_1");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PototoTrade.Models.Product.PurchaseOrder", b =>
                {
                    b.HasOne("PototoTrade.Models.ShoppingCart.ShoppingCarts", "Cart")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("purchase_order_ibfk_2");

                    b.HasOne("PototoTrade.Models.User.UserAccount", "User")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("purchase_order_ibfk_1");

                    b.Navigation("Cart");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PototoTrade.Models.Role.Role.AdminPermission", b =>
                {
                    b.HasOne("PototoTrade.Models.Role.Roles", "Role")
                        .WithMany("AdminPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("admin_permissions_ibfk_1");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PototoTrade.Models.ShoppingCart.ShoppingCartItem", b =>
                {
                    b.HasOne("PototoTrade.Models.ShoppingCart.ShoppingCarts", "Cart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("shopping_cart_items_ibfk_1");

                    b.HasOne("PototoTrade.Models.Product.Products", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("shopping_cart_items_ibfk_2");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PototoTrade.Models.ShoppingCart.ShoppingCarts", b =>
                {
                    b.HasOne("PototoTrade.Models.User.UserAccount", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("PototoTrade.Models.ShoppingCart.ShoppingCarts", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("shopping_cart_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PototoTrade.Models.User.UserAccount", b =>
                {
                    b.HasOne("PototoTrade.Models.Role.Roles", "Role")
                        .WithMany("UserAccounts")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("user_accounts_ibfk_1");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PototoTrade.Models.User.UserActivitiesLog", b =>
                {
                    b.HasOne("PototoTrade.Models.User.UserAccount", "User")
                        .WithMany("UserActivitiesLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_activities_log_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PototoTrade.Models.User.UserDetail", b =>
                {
                    b.HasOne("PototoTrade.Models.User.UserAccount", "User")
                        .WithMany("UserDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_details_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PototoTrade.Models.User.UserReport", b =>
                {
                    b.HasOne("PototoTrade.Models.User.UserAccount", "ReportedUser")
                        .WithMany("UserReportReportedUsers")
                        .HasForeignKey("ReportedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_report_ibfk_1");

                    b.HasOne("PototoTrade.Models.User.UserAccount", "ReporterUser")
                        .WithMany("UserReportReporterUsers")
                        .HasForeignKey("ReporterUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_report_ibfk_2");

                    b.Navigation("ReportedUser");

                    b.Navigation("ReporterUser");
                });

            modelBuilder.Entity("PototoTrade.Models.User.UserSession", b =>
                {
                    b.HasOne("PototoTrade.Models.User.UserAccount", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_session_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PototoTrade.Models.User.UserWallet", b =>
                {
                    b.HasOne("PototoTrade.Models.User.UserAccount", "User")
                        .WithOne("UserWallet")
                        .HasForeignKey("PototoTrade.Models.User.UserWallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_wallet_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PototoTrade.Models.User.WalletTransaction", b =>
                {
                    b.HasOne("PototoTrade.Models.User.UserWallet", "Wallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("wallet_transaction_ibfk_1");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("PototoTrade.Models.BuyerItem.BuyerItems", b =>
                {
                    b.Navigation("BuyerItemDeliveries");
                });

            modelBuilder.Entity("PototoTrade.Models.Content.Contents", b =>
                {
                    b.Navigation("ContentDetails");
                });

            modelBuilder.Entity("PototoTrade.Models.Product.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PototoTrade.Models.Product.Products", b =>
                {
                    b.Navigation("BuyerItems");

                    b.Navigation("ProductReviews");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("PototoTrade.Models.Product.PurchaseOrder", b =>
                {
                    b.Navigation("BuyerItems");
                });

            modelBuilder.Entity("PototoTrade.Models.Role.Roles", b =>
                {
                    b.Navigation("AdminPermissions");

                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("PototoTrade.Models.ShoppingCart.ShoppingCarts", b =>
                {
                    b.Navigation("PurchaseOrders");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("PototoTrade.Models.User.UserAccount", b =>
                {
                    b.Navigation("BuyerItems");

                    b.Navigation("Notifications");

                    b.Navigation("ProductReviews");

                    b.Navigation("Products");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("ShoppingCart");

                    b.Navigation("UserActivitiesLogs");

                    b.Navigation("UserDetails");

                    b.Navigation("UserReportReportedUsers");

                    b.Navigation("UserReportReporterUsers");

                    b.Navigation("UserSessions");

                    b.Navigation("UserWallet");
                });

            modelBuilder.Entity("PototoTrade.Models.User.UserWallet", b =>
                {
                    b.Navigation("WalletTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
